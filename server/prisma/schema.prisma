// Prisma schema for the TravelBot backend. This file defines the
// PostgreSQL models used by the application. The schema is mapped to
// your database via the DATABASE_URL environment variable. It is
// designed to support user profiles, saved routes, favourites and
// future payment integrations. See the README for more details.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  /// Telegram user identifier. Telegram IDs do not fit into a
  /// regular 32‑bit integer, so the BigInt type is used. This field
  /// also serves as the primary key.
  id         BigInt   @id
  /// Telegram username. This value is optional because a user may
  /// not have set a username.
  username   String?  @db.VarChar(255)
  /// First name of the user as provided by Telegram. Optional
  /// because Telegram may not supply it.
  firstName  String?  @db.VarChar(255)
  /// Preferred language code (e.g. "ru", "en"). Useful for
  /// selecting the default UI language. Optional as Telegram
  /// doesn't always provide a language.
  language   String?  @db.VarChar(10)
  /// Timestamp of when this user record was created in the
  /// database.
  createdAt  DateTime @default(now())
  /// Relationship to the user profile containing travel
  /// preferences. Each user has at most one profile.
  profile    Profile?
  /// Relationship to the saved routes created by the user. A user
  /// may have zero or many routes.
  routes     Route[]
  /// Relationship to the favourite points of interest saved by the
  /// user in planning mode.
  favorites  Favorite[]
  /// Relationship to payments (future). Each payment record
  /// corresponds to a single transaction performed by the user.
  payments   Payment[]
}

model Profile {
  /// Auto‑incrementing identifier for the profile. The user ID is
  /// stored separately as a unique foreign key.
  id           Int     @id @default(autoincrement())
  /// The Telegram user ID to which this profile belongs. Unique
  /// because each user has at most one profile.
  userId       BigInt  @unique
  /// JSON‑encoded list of food preferences. Stored as a string in
  /// the database for ease of use.
  food         String?
  /// JSON‑encoded list of preferred activities/entertainment. Also
  /// stored as a string.
  activities   String?
  /// Daily budget text (e.g. "до 3000₽"). Stored as plain text.
  dailyBudget  String?
  /// Travel style descriptor (e.g. "спокойный", "активный").
  travelStyle  String?
  /// Back reference to the user record. Enforces referential
  /// integrity.
  user         User    @relation(fields: [userId], references: [id])
}

model Route {
  /// Auto‑incrementing route identifier.
  id          Int      @id @default(autoincrement())
  /// ID of the user who generated this route.
  userId      BigInt
  /// Name of the city for which the route was generated.
  city        String
  /// Optional country name corresponding to the city.
  country     String?
  /// Language in which the route was generated ("ru" or "en").
  language    String?
  /// JSON of the route returned by the AI. Includes title,
  /// duration, places with coordinates, distance and cost. Stored
  /// using the database JSON type for efficient querying.
  routeJson   Json
  /// Timestamp when the route was created.
  createdAt   DateTime @default(now())
  /// Back reference to the user. Maintains cascade on delete.
  user        User     @relation(fields: [userId], references: [id])
}

model Favorite {
  /// Auto‑incrementing identifier for a favourite POI.
  id         Int      @id @default(autoincrement())
  /// ID of the user who favourited this place.
  userId     BigInt
  /// Name of the city in which this place resides. Useful for
  /// grouping favourites by city.
  city       String
  /// Name of the point of interest.
  name       String
  /// Optional type/category of the POI (e.g. "museum", "park").
  type       String?
  /// Latitude of the place. Nullable because some favourite
  /// entries may not have coordinates (e.g. if geocoding fails).
  lat        Float?
  /// Longitude of the place.
  lng        Float?
  /// Human‑readable address combining name and description.
  address    String?
  /// Timestamp when the favourite was added.
  createdAt  DateTime @default(now())
  /// Back reference to the user.
  user       User     @relation(fields: [userId], references: [id])
}

model Payment {
  /// Auto‑incrementing payment identifier.
  id        Int      @id @default(autoincrement())
  /// ID of the user who made the payment.
  userId    BigInt
  /// Payment provider used (e.g. "stars", "yookassa").
  provider  String
  /// Amount of the transaction in minor currency units.
  amount    Int
  /// Currency code (e.g. "XTR" or "RUB").
  currency  String
  /// Payment status: pending, paid or failed.
  status    String
  /// Additional JSON payload returned by the payment provider.
  payload   Json?
  /// Timestamp of when the payment record was created.
  createdAt DateTime @default(now())
  /// Back reference to the user.
  user      User     @relation(fields: [userId], references: [id])
}